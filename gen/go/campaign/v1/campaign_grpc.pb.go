// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: campaign/v1/campaign.proto

package campaign

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CampaignService_CreateCampaign_FullMethodName       = "/campaign.v1.CampaignService/CreateCampaign"
	CampaignService_GetCampaignByID_FullMethodName      = "/campaign.v1.CampaignService/GetCampaignByID"
	CampaignService_DeleteCampaignByID_FullMethodName   = "/campaign.v1.CampaignService/DeleteCampaignByID"
	CampaignService_UpdateCampaignByID_FullMethodName   = "/campaign.v1.CampaignService/UpdateCampaignByID"
	CampaignService_GetCampaignsByUserID_FullMethodName = "/campaign.v1.CampaignService/GetCampaignsByUserID"
)

// CampaignServiceClient is the client API for CampaignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignServiceClient interface {
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error)
	GetCampaignByID(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error)
	DeleteCampaignByID(ctx context.Context, in *DeleteCampaignByIDRequest, opts ...grpc.CallOption) (*DeleteCampaignByIDResponse, error)
	UpdateCampaignByID(ctx context.Context, in *UpdateCampaignByIDRequest, opts ...grpc.CallOption) (*UpdateCampaignByIDResponse, error)
	GetCampaignsByUserID(ctx context.Context, in *GetCampaignsByUserIDRequest, opts ...grpc.CallOption) (*GetCampaignsByUserIDResponse, error)
}

type campaignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignServiceClient(cc grpc.ClientConnInterface) CampaignServiceClient {
	return &campaignServiceClient{cc}
}

func (c *campaignServiceClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignService_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) GetCampaignByID(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCampaignByIDResponse)
	err := c.cc.Invoke(ctx, CampaignService_GetCampaignByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteCampaignByID(ctx context.Context, in *DeleteCampaignByIDRequest, opts ...grpc.CallOption) (*DeleteCampaignByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCampaignByIDResponse)
	err := c.cc.Invoke(ctx, CampaignService_DeleteCampaignByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateCampaignByID(ctx context.Context, in *UpdateCampaignByIDRequest, opts ...grpc.CallOption) (*UpdateCampaignByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCampaignByIDResponse)
	err := c.cc.Invoke(ctx, CampaignService_UpdateCampaignByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) GetCampaignsByUserID(ctx context.Context, in *GetCampaignsByUserIDRequest, opts ...grpc.CallOption) (*GetCampaignsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCampaignsByUserIDResponse)
	err := c.cc.Invoke(ctx, CampaignService_GetCampaignsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignServiceServer is the server API for CampaignService service.
// All implementations must embed UnimplementedCampaignServiceServer
// for forward compatibility.
type CampaignServiceServer interface {
	CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error)
	GetCampaignByID(context.Context, *GetCampaignByIDRequest) (*GetCampaignByIDResponse, error)
	DeleteCampaignByID(context.Context, *DeleteCampaignByIDRequest) (*DeleteCampaignByIDResponse, error)
	UpdateCampaignByID(context.Context, *UpdateCampaignByIDRequest) (*UpdateCampaignByIDResponse, error)
	GetCampaignsByUserID(context.Context, *GetCampaignsByUserIDRequest) (*GetCampaignsByUserIDResponse, error)
	mustEmbedUnimplementedCampaignServiceServer()
}

// UnimplementedCampaignServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCampaignServiceServer struct{}

func (UnimplementedCampaignServiceServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) GetCampaignByID(context.Context, *GetCampaignByIDRequest) (*GetCampaignByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignByID not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteCampaignByID(context.Context, *DeleteCampaignByIDRequest) (*DeleteCampaignByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaignByID not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateCampaignByID(context.Context, *UpdateCampaignByIDRequest) (*UpdateCampaignByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaignByID not implemented")
}
func (UnimplementedCampaignServiceServer) GetCampaignsByUserID(context.Context, *GetCampaignsByUserIDRequest) (*GetCampaignsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignsByUserID not implemented")
}
func (UnimplementedCampaignServiceServer) mustEmbedUnimplementedCampaignServiceServer() {}
func (UnimplementedCampaignServiceServer) testEmbeddedByValue()                         {}

// UnsafeCampaignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignServiceServer will
// result in compilation errors.
type UnsafeCampaignServiceServer interface {
	mustEmbedUnimplementedCampaignServiceServer()
}

func RegisterCampaignServiceServer(s grpc.ServiceRegistrar, srv CampaignServiceServer) {
	// If the following call pancis, it indicates UnimplementedCampaignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CampaignService_ServiceDesc, srv)
}

func _CampaignService_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_GetCampaignByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).GetCampaignByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_GetCampaignByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).GetCampaignByID(ctx, req.(*GetCampaignByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteCampaignByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteCampaignByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteCampaignByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteCampaignByID(ctx, req.(*DeleteCampaignByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateCampaignByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateCampaignByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateCampaignByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateCampaignByID(ctx, req.(*UpdateCampaignByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_GetCampaignsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).GetCampaignsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_GetCampaignsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).GetCampaignsByUserID(ctx, req.(*GetCampaignsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignService_ServiceDesc is the grpc.ServiceDesc for CampaignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campaign.v1.CampaignService",
	HandlerType: (*CampaignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaign",
			Handler:    _CampaignService_CreateCampaign_Handler,
		},
		{
			MethodName: "GetCampaignByID",
			Handler:    _CampaignService_GetCampaignByID_Handler,
		},
		{
			MethodName: "DeleteCampaignByID",
			Handler:    _CampaignService_DeleteCampaignByID_Handler,
		},
		{
			MethodName: "UpdateCampaignByID",
			Handler:    _CampaignService_UpdateCampaignByID_Handler,
		},
		{
			MethodName: "GetCampaignsByUserID",
			Handler:    _CampaignService_GetCampaignsByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campaign/v1/campaign.proto",
}
